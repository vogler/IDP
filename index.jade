doctype 5
html(lang="de")
  head
    title= pageTitle
    link(href="css/bootstrap.min.css", rel="stylesheet", media="screen")
    link(href="css/smoothness/jquery-ui-1.9.2.custom.min.css", rel="stylesheet")
    link(href="css/jquery.miniColors.css", rel="stylesheet")
    script(src="https://maps.googleapis.com/maps/api/js?v=3.exp&sensor=false&libraries=visualization")
    script(src="js/jquery-1.8.3.min.js")
    script(src="js/jquery-ui-1.9.2.custom.min.js")
    script(src="js/jquery.miniColors.min.js")
    script(src="js/bootstrap.min.js")
    script(src="js/bootstrap-filestyle-0.1.0.min.js")
    script(src="js/sugar-1.3.6.min.js")
    script(src="js/sugar-locale-de.js")
    script(src="js/knockout-2.2.0.js")
    script(src="js/knockout.mapping-latest.js")
    != css('index')
    != js('fixes')
    != js('index')
    script!= 'db_baustellen = ko.mapping.fromJS(' + JSON.stringify(baustellen) + ')'
    script!= 'db_files = ko.mapping.fromJS(' + JSON.stringify(files) + ')'
    script
      stats = ko.mapping.fromJS({info: [], table: [], allGates: [], intersectedGates: [], intersectedGatesOrg: []});
      $(function() {
        function BaustellenViewModel() {
          // Data
          var self = this;
          var url = '/db/baustellen';
          //- self.baustellen = ko.observable([]);
          //- $.getJSON(url, function(data) {
          //-   self.baustellen(data);
          //- });    
          self.baustellen = db_baustellen;
          self.baustelle = ko.observable();
          self.newItem = ko.observable();

          // extend model by an editing field
          ko.utils.arrayForEach(self.baustellen(), function(item){
            item.editing = ko.observable(false);
          });

          // Operations
          self.addItem = function() {
            var name = this.newItem();
            $.post(url, {name: name}, function(item){
              item.editing = ko.observable(false);
              self.baustellen.push(item);
              // update mapping (makes fields of new item observable too)
              ko.mapping.fromJS(ko.mapping.toJS(self.baustellen), self.baustellen);
              self.newItem("");
              console.log("added", item._id);
            });
          };
          self.removeItem = function(item) {
            $.del(url, item, function(data){
              self.baustellen.remove(item); // destroy marks for deletion
              console.log("removed", data._id);
            });
          };
          self.editItem = function(item, event) {
            self.oldItem = ko.toJSON(item); // store old state
            item.editing(true);
          };
          self.stopEditing = function(item, event) {
            if(!item.editing()) return; // ignore blur after enter
            item.editing(false);
            // remove the item, if it is now empty
            if(!item.name().trim()) {
              self.removeItem(item);
            } else if(ko.toJSON(item) != self.oldItem) { // only update on change
              var tmp = item.editing;
              delete item.editing; // don't save this helper field
              $.put(url, item, function(data){
                item.editing = tmp; // restore field
                console.log("saved", data._id);
              });
            }
          };
        }
        baustellenViewModel = new BaustellenViewModel();
        ko.applyBindings(baustellenViewModel);
      });
      
      function formatRowContent(data, index, row){
        if(!index || row == 'Anzahl') return data;
        if(data instanceof Array)
          return data.map(function(x){return duration(x)}).join('<br>');
        else
          return duration(data);
      }

  body
    #layoutMenu.dropdown
      a.btn.btn-mini.dropdown-toggle(data-toggle="dropdown")
        b.caret
      ul.dropdown-menu
        li: a(onclick="$('#controls').toggle()") Seitenleiste
        li: a(onclick="$('#infoTable').toggle()") Tabellen
        li: a(onclick="$('#files').toggle()") Dateiliste
    #baustellen.modal.fade.hide
      .modal-header
        button.close(data-dismiss="modal", aria-hidden="true") x
        h3 Baustellen
      .modal-body.span4
        ul.unstyled(data-bind="foreach: baustellen, visible: baustellen().length > 0")
          li
            span(data-bind="visible: !editing(), text: name, event: { dblclick: $parent.editItem }")
            input(data-bind="visible: editing(), value: name, hasfocus: editing(), valueUpdate: 'afterkeydown', enterKey: $parent.stopEditing, event: { blur: $parent.stopEditing }")
            a.pull-right(data-bind="click: $parent.removeItem"): i.icon-trash
            a.pull-right(data-bind="click: $parent.editItem"): i.icon-pencil
        form(data-bind="submit: addItem", onsubmit="$(this).find('input:first').focus()")
          .input-append
            input.span2(type='text', data-bind="value: newItem", placeholder='Name...', autofocus)
            a.btn(onclick="$(this).parents('form:first').submit()"): i.icon-plus
            input.btn(type='submit', value='hinzufügen')
    #controls.ui-accordion.ui-widget.ui-helper-reset
      h3 Upload
      div.ui-accordion-content.ui-helper-reset.ui-widget-content.ui-corner-bottom
        form(action="/upload", method="post", enctype="multipart/form-data")
          input(type='file', name='map')
      h3 Baustelle
      div
        .form-inline
          select.input-medium(data-bind="options: baustellen, optionsText: 'name', value: baustelle, event: { change: loadGates}")
          a.btn(href='#baustellen', data-toggle='modal'): i.icon-cog
        div(data-bind="visible: baustelle")
          form(action="/upload", method="post", enctype="multipart/form-data")
            input(type='file', name='map2')
          ul.unstyled.inline
            li 
              a.btn.btn-mini#btn_gate(rel="tooltip", title="Zwei mal auf Karte klicken um Linie zu erstellen"): i.icon-plus
              |  Gates
            li
              a.btn.btn-mini#btn_area(rel="tooltip", title="bla"): i.icon-plus
              |  Area
      h3 Gates
      #gates(data-bind="foreach: stats.allGates")
        a.btn.active(
          data-bind="text: markers[$data].title, attr: {i: $data}, css: {disabled: stats.intersectedGatesOrg().indexOf($data)==-1}"
          onclick="if(!$(this).hasClass('disabled')){ $(this).button('toggle'); loadMap(); }")
      h3 Karte
      div
        | Datum: 
        small#time_date
        br
        | Start: 
        small#time_start
        |  | Ende: 
        small#time_end
        br
        | Dauer: 
        small#time_duration
        br
        a.btn(onclick='geocode()')
          i.icon-flag
          |  reverse geocode
      h3 Animation
      div
        a.btn#btn_play: i.icon-play
        a.btn(onclick='anim_stop()'): i.icon-stop
        a.btn.active(onclick='anim.follow = !anim.follow', data-toggle="button")
          i.icon-move
          |  folgen
        br
        | Geschwindigkeit: 
        span#speed
        | x
        #speed_slider
      h3 Optionen
      div
        | Farbe: 
        input(type='text')#colorSelector
        |  Stärke: 
        input(type='text')#stroke_spinner
        //- html5 number picker
        //- input(type="number", min="0", max="10", step=".1", value="1")
        .btn-group
          a.btn.active(onclick='toggleLine()', data-toggle="button") Linie
          a.btn.active(onclick='toggleMarkers()', data-toggle="button") Marker
          a.btn(onclick='toggleHeatmap()', data-toggle="button") Heatmap
        div
          label.checkbox.pull-left
            input#tooltips(type="checkbox", checked, onclick='tooltips()')
            | Tooltips &nbsp;
          i.icon-eye-open(onclick="tooltips('show')")
    #map_canvas
    #anim_timeline.hide
      span#anim_time
        | 0:00
      #anim_slider
    #infoTable.span7: table.table.table-condensed(data-bind="visible: stats.table().length")
      thead
        tr
          th Gates
          // ko foreach: stats.info 
          th(style="white-space: nowrap", data-bind="text: markers[from()].title+' zu '+markers[to()].title")
          // /ko 
      tbody(data-bind="foreach: {data: stats.table, as: 'row'}")
        tr(data-bind="foreach: row")
          td(data-bind="html: formatRowContent($data, $index(), row[0])")
    #files
      if files.length<1
        | Es sind noch keine Karten vorhanden
      each f in files
        a(href="javascript: loadMap('"+f+"')")= f
        br