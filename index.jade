doctype 5
html(lang="de")
  head
    title= pageTitle
    link(href="css/bootstrap.min.css", rel="stylesheet", media="screen")
    link(href="css/smoothness/jquery-ui-1.9.2.custom.min.css", rel="stylesheet")
    link(href="css/jquery.miniColors.css", rel="stylesheet")
    script(src="https://maps.googleapis.com/maps/api/js?v=3.exp&sensor=false")
    script(src="js/jquery-1.8.3.min.js")
    script(src="js/jquery-ui-1.9.2.custom.min.js")
    script(src="js/jquery.miniColors.min.js")
    script(src="js/bootstrap.min.js")
    script(src="js/sugar-1.3.6.min.js")
    script(src="js/sugar-locale-de.js")
    script(src="js/knockout-2.2.0.js")
    != css('index')
    != js('index')
    script#db_baustellen!= JSON.stringify(baustellen)
    script
      $(document).ready(function() {
        function Task(data) {
          this.name = ko.observable(data);
        }

        function TaskListViewModel() {
          // Data
          var self = this;
          //- self.tasks = ko.observableArray([]);
          self.tasks = ko.observableArray(JSON.parse($('#db_baustellen').text()).map(function(x){
            return new Task(x.name);
          }));
          this.baustelle = ko.observable();
          self.newTaskText = ko.observable();
          self.incompleteTasks = ko.computed(function() {
            return ko.utils.arrayFilter(self.tasks(), function(task) { return !task._destroy });
          });

          // Operations
          self.addTask = function() {
            var name = this.newTaskText();
            $.post('/baustellen', {baustelle: name}, function(data){
              self.tasks.push(new Task(name));
              self.newTaskText("");
            });
          };
          self.removeTask = function(task) {
            $.ajax({
              url: '/baustellen',
              type: 'DELETE',
              data: {name: task.name},
              success: function(result){
                //- li.slideUp();
                self.tasks.remove(task); // destroy
              }
            });
          };

          // Load initial state from server, convert it to Task instances, then populate self.tasks
          //- $.getJSON("/baustellen", function(allData) {
          //-   var mappedTasks = $.map(allData, function(item) { return new Task(item) });
          //-   self.tasks(mappedTasks);
          //- });    
        }

        ko.applyBindings(new TaskListViewModel());
      });
  body
    #layout
      img(src='img/layout.png', onclick="$('#layouts').toggle()")
      ul#layouts
        li(onclick="$('#controls').toggle()") Seitenleiste
        li(onclick="$('#infoTable').toggle()") Tabellen
        li(onclick="$('#files').toggle()") Dateiliste
    #baustellen.modal.fade.hide
      .modal-header
        button.close(data-dismiss="modal", aria-hidden="true") x
        h3 Baustellen
      .modal-body
        ul(data-bind="foreach: tasks, visible: tasks().length > 0")
          li
            a(data-bind="click: $parent.removeTask"): i.icon-trash
            span(data-bind="text: name")
        form(data-bind="submit: addTask")
          .input-append
            input.span2(type='text', data-bind="value: newTaskText", placeholder='Name...')
            a.btn(onclick="$(this).parents('form:first').submit()"): i.icon-plus
            input.btn(type='submit', value='hinzuf체gen')
          //- somehow input(type='submit') shows only text instead of icon
          //- button.ui-icon-plus(onclick="$(this).parents('form').submit()") hinzuf체gen
          //- Problem: submits form twice?!
    #controls.ui-accordion.ui-widget.ui-helper-reset
      h3 Upload
      div.ui-accordion-content.ui-helper-reset.ui-widget-content.ui-corner-bottom
        form(action="/upload", method="post", enctype="multipart/form-data")
          input#fileUpload(type='file', name='map')
      h3 Baustelle
      div
        select(data-bind="options: tasks, optionsCaption: 'w채hlen...', optionsText: 'name', value: baustelle")
        a.btn(href='#baustellen', data-toggle='modal'): i.icon-cog
        ul
          li Plaene
          li Gates
            | 
            a.btn.btn-mini#btn_gate: i.icon-plus
      h3 LKW
      div
      h3 Karte
      div
        | Start: 
        span#time_start
        br
        | Ende: 
        span#time_end
        br
        | Dauer: 
        span#time_duration
        br
        a.btn(onclick='geocode()')
          i.icon-flag
          |  reverse geocode
      h3 Filter
      div
        ul
          li Typ
          li Outliers
      h3 Animation
      div
        a.btn#btn_play: i.icon-play
        a.btn(onclick='anim_stop()'): i.icon-stop
        a.btn.active(onclick='anim_follow = !anim_follow', data-toggle="button")
          i.icon-move
          |  folgen
        br
        | Geschwindigkeit: 
        span#speed
        | x
        #speed_slider
      h3 Optionen
      div
        | Farbe: 
        input(type='text')#colorSelector
        |  St채rke: 
        input(type='text')#stroke_spinner
        //- html5 number picker
        //- input(type="number", min="0", max="10", step=".1", value="1")
    #map_canvas
    #infoTable.span7: table.table.table-condensed
      thead
        tr
          th Truck
          th(colspan=2) Dumper 1
          th(colspan=2) Dumper 2
        tr
          th Segment
          th Gate 1 to 1
          th Gate 1 to 3
          th Gate 1 to 1
          th Gate 1 to 3
      tbody
        each s in [1,2,3,4]
          tr
            td Segment time #{s}
            td 2:30
            td 2:30
            td 2:30
            td 2:30
    #files
      each f in files
        a(href="javascript: loadMap('"+f+"')")= f
        br