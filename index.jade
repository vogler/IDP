doctype 5
html(lang="de")
  head
    title= pageTitle
    link(href="css/bootstrap.min.css", rel="stylesheet", media="screen")
    link(href="css/smoothness/jquery-ui-1.9.2.custom.min.css", rel="stylesheet")
    link(href="css/jquery.miniColors.css", rel="stylesheet")
    script(src="https://maps.googleapis.com/maps/api/js?v=3.exp&sensor=false")
    script(src="js/jquery-1.8.3.min.js")
    script(src="js/jquery-ui-1.9.2.custom.min.js")
    script(src="js/jquery.miniColors.min.js")
    script(src="js/bootstrap.min.js")
    script(src="js/sugar-1.3.6.min.js")
    script(src="js/sugar-locale-de.js")
    script(src="js/knockout-2.2.0.js")
    script(src="js/knockout.mapping-latest.js")
    != css('index')
    != js('index')
    script!= 'db_baustellen = ko.mapping.fromJS(' + JSON.stringify(baustellen) + ')'
    script
      $(function() {
        function BaustellenViewModel() {
          // Data
          var self = this;
          //- self.baustellen = ko.observable([]);
          //- $.getJSON("/db/baustellen", function(data) {
          //-   self.baustellen(data);
          //- });    
          self.baustellen = db_baustellen;
          self.baustelle = ko.observable();
          self.newItem = ko.observable();
          self.editing = ko.observable(false);

          // Operations
          self.addItem = function() {
            var name = this.newItem();
            $.post('/db/baustellen', {name: name}, function(data){
              self.baustellen.push(data);
              // update mapping (makes fields of new data observable too)
              ko.mapping.fromJS(ko.mapping.toJS(self.baustellen), self.baustellen);
              self.newItem("");
              console.log("added "+data._id);
            });
            $.put('buh');
          };
          self.removeItem = function(item) {
            $.ajax({
              url: '/db/baustellen',
              type: 'DELETE',
              data: item,
              success: function(data){
                self.baustellen.remove(item); // destroy
                console.log("removed "+data._id);
              }
            });
          };
          self.editItem = function( item ) {
            self.editing(true);
          };
          self.stopEditing = function( item ) {
            // remove the item, if it is now empty
            if(!item.name().trim()) {
              self.editing(false);
              self.removeItem(item);
            }else{
              $.ajax({
                url: '/db/baustellen',
                type: 'PUT',
                data: item,
                success: function(data){
                  self.editing(false);
                  console.log("saved "+data._id);
                }
              });
              //- $.post('/db/baustellen', item, function(data){
              //-   self.editing(false);
              //-   console.log("saved "+data._id);
              //- });
            }
          };
        }

        ko.applyBindings(new BaustellenViewModel());
      });
      

  body
    .dropdown.navbar-fixed-top
      a.btn.btn-mini.dropdown-toggle(data-toggle="dropdown")
        b.caret
      ul.dropdown-menu
        li: a(onclick="$('#controls').toggle()") Seitenleiste
        li: a(onclick="$('#infoTable').toggle()") Tabellen
        li: a(onclick="$('#files').toggle()") Dateiliste
    #baustellen.modal.fade.hide
      .modal-header
        button.close(data-dismiss="modal", aria-hidden="true") x
        h3 Baustellen
      .modal-body
        ul(data-bind="foreach: baustellen, visible: baustellen().length > 0")
          li
            a(data-bind="click: $parent.removeItem"): i.icon-trash 
            span(data-bind="text: name, visible: !$parent.editing(), event: { dblclick: $parent.editItem }")
            input(data-bind="value: name, visible: $parent.editing(), valueUpdate: 'afterkeydown', enterKey: $parent.stopEditing, event: { blur: $parent.stopEditing }")
            a.pull-right(data-bind="click: $parent.removeItem"): i.icon-trash
        form(data-bind="submit: addItem", onsubmit="$(this).find('input:first').focus()")
          .input-append
            input.span2(type='text', data-bind="value: newItem", placeholder='Name...', autofocus)
            a.btn(onclick="$(this).parents('form:first').submit()"): i.icon-plus
            input.btn(type='submit', value='hinzufügen')
    #controls.ui-accordion.ui-widget.ui-helper-reset
      h3 Upload
      div.ui-accordion-content.ui-helper-reset.ui-widget-content.ui-corner-bottom
        form(action="/upload", method="post", enctype="multipart/form-data")
          input#fileUpload(type='file', name='map')
      h3 Baustelle
      div
        select(data-bind="options: baustellen, optionsCaption: 'wählen...', optionsText: 'name', value: baustelle")
        a.btn(href='#baustellen', data-toggle='modal'): i.icon-cog
        ul
          li Plaene
          li Gates 
            a.btn.btn-mini#btn_gate: i.icon-plus
          li Area 
            a.btn.btn-mini#btn_area(rel="tooltip", title="bla"): i.icon-plus
      h3 LKW
      div
      h3 Karte
      div
        | Start: 
        span#time_start
        br
        | Ende: 
        span#time_end
        br
        | Dauer: 
        span#time_duration
        br
        a.btn(onclick='geocode()')
          i.icon-flag
          |  reverse geocode
      h3 Filter
      div
        ul
          li Typ
          li Outliers
      h3 Animation
      div
        a.btn#btn_play: i.icon-play
        a.btn(onclick='anim_stop()'): i.icon-stop
        a.btn.active(onclick='anim_follow = !anim_follow', data-toggle="button")
          i.icon-move
          |  folgen
        br
        | Geschwindigkeit: 
        span#speed
        | x
        #speed_slider
      h3 Optionen
      div
        | Farbe: 
        input(type='text')#colorSelector
        |  Stärke: 
        input(type='text')#stroke_spinner
        //- html5 number picker
        //- input(type="number", min="0", max="10", step=".1", value="1")
        label.checkbox.pull-left
          input#tooltips(type="checkbox", checked, onclick='tooltips()')
          | Tooltips &nbsp;
        i.icon-eye-open(onclick="tooltips('show')")
    #map_canvas
    #infoTable.span7: table.table.table-condensed
      thead
        tr
          th Truck
          th(colspan=2) Dumper 1
          th(colspan=2) Dumper 2
        tr
          th Segment
          th Gate 1 to 1
          th Gate 1 to 3
          th Gate 1 to 1
          th Gate 1 to 3
      tbody
        each s in [1,2,3,4]
          tr
            td Segment time #{s}
            td 2:30
            td 2:30
            td 2:30
            td 2:30
    #files
      each f in files
        a(href="javascript: loadMap('"+f+"')")= f
        br